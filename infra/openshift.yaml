---
# Deployment: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# In short is an abstraction on top of Pods and you describe the desired state of your pods in it. The Deployment controller will make sure that state is met.
kind: Deployment
apiVersion: apps/v1
metadata:
  name: dev-alm-workshop-2025-app
  labels:
    app: dev-alm-workshop-2025-app
spec:
  ## TODO: Update replica amount
  replicas: 4
  selector:
    matchLabels:
      # Indicates to which pods the Deployment controller should bind
      app: dev-alm-workshop-2025-app
  # Pod Template starts here, this is the pod that is created
  template:
    metadata:
      labels:
        # We use this label in other resources to select this pod
        app: dev-alm-workshop-2025-app
    spec:
      containers:
        - name: workshop
          # TODO: Update image to your image
          image: quay.io/jonasdemaeyer1/alm-workshop
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              protocol: TCP
---
# Service: https://kubernetes.io/docs/concepts/services-networking/service/
# In short: a Service is a method for exposing a network application that is running as one or more Pods in your cluster. It uses the dynamic service discovery via labels to allow for new pods to start / stop on-demand.
kind: Service
apiVersion: v1
metadata:
  name: dev-alm-workshop-2025-app
  labels:
    app: dev-alm-workshop-2025-app
spec:
  ports:
    - name: 3000-tcp
      protocol: TCP
      port: 3000
      targetPort: 3000
  # This indicates to which pods the service will bind
  selector:
    app: dev-alm-workshop-2025-app
---
# Route: https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html
# In short: An OpenShift specific concept but equal to the Ingress resource in Kubernetes with some extra sugar on-top. The Route exposes your selected service to the outside world via a hostname (e.g. workshop-test-for-ae.com). If no hostname is defined in the spec it will use cluster defaults. We will do this as we don't have any custom domains right now.
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: dev-alm-workshop-2025-app
  labels:
    app: dev-alm-workshop-2025-app
spec:
  to:
    kind: Service
    name: dev-alm-workshop-2025-app
    weight: 100
  port:
    targetPort: 3000-tcp
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
